
	import { Item } from "@/common/type.uts"
	export default {
		name: "u-action",
		emits: ["output"],
		props: {
			list: {
				type: Array,
				required: true
			},
		},
		data() {
			return {
				panelBottom: 0,
				panelVisiable: false,
				panelFous: false,
				amplity: '',
				hasGetRandomDish: false,
				dishName: ""
			};
		},
		watch: {
			panelVisiable(v : boolean) {
				this.panelFous = v
			}
		},
		methods: {
			onInputConfirm(e : InputConfirmEvent) {
				const text = e.detail.value
				const isEmpty = text.length == 0 || text.trim() == ''
				if (isEmpty) {
					return
				}
				this.$emit('output', text)
			},
			onKeyboardheightchange(e : InputKeyboardHeightChangeEvent) {
				if (e.detail.height <= 0) {
					this.panelVisiable = false
				}
				this.panelBottom = e.detail.height > 0 ? 340 : 0
			},
			getRandomDish() {
				if (!this.hasGetRandomDish) {
					this.hasGetRandomDish = true
					this.$nextTick(() => {
						this.amplity = "animate-amplify"
					})
					const item = this.list[Math.round(Math.random() * (this.list.length - 1))] as Item
					if (item.text != "") {
						this.dishName = item.text
					}
				} else {
					this.amplity = "animate-fade-out"
				}
			}
		},
	}


import _easycom_u_icon from '@/components/u-icon/u-icon.uvue'
function GenComponentsUActionUActionRender(): any | null {
const _ctx = this
const _cache = this.$.renderCache
const _component_u_icon = resolveEasyComponent("u-icon",_easycom_u_icon)

  return createElementVNode(Fragment, null, [
    isTrue(!_ctx.panelVisiable)
      ? createElementVNode("view", utsMapOf({ key: 0 }), [
          createVNode(_component_u_icon, utsMapOf({
            class: "plus-btn-right rounded-circle position-fixed",
            size: "60rpx",
            code: '\ue657',
            onClick: () => {_ctx.panelVisiable = true}
          }), null, 8, ["onClick"]),
          createVNode(_component_u_icon, utsMapOf({
            class: "plus-btn-left rounded-circle position-fixed",
            size: "60rpx",
            code: '\ue750',
            onClick: _ctx.getRandomDish
          }), null, 8, ["onClick"])
        ])
      : createElementVNode("view", utsMapOf({
          key: 1,
          class: "panel position-fixed bottom-0 p-2 justify-center",
          style: normalizeStyle(utsMapOf({ bottom:`${_ctx.panelBottom}px`}) )
        }), [
          createElementVNode("input", utsMapOf({
            placeholder: "添加菜品",
            focus: _ctx.panelFous,
            "adjust-position": false,
            onKeyboardheightchange: _ctx.onKeyboardheightchange,
            onConfirm: _ctx.onInputConfirm
          }), null, 40, ["focus", "onKeyboardheightchange", "onConfirm"])
        ], 4),
    isTrue(_ctx.hasGetRandomDish)
      ? createElementVNode("view", utsMapOf({
          key: 2,
          class: normalizeClass(["showDish animate-base rounded-circle justify-center align-center p-4 m-4 position-fixed", [_ctx.amplity]])
        }), [
          createElementVNode("text", null, toDisplayString(_ctx.dishName), 1)
        ], 2)
      : createCommentVNode("v-if", true)
  ], 64 /* STABLE_FRAGMENT */)
}
const GenComponentsUActionUActionStyles = [utsMapOf([["plus-btn-right", padStyleMapOf(utsMapOf([["width", "80rpx"], ["height", "80rpx"], ["right", "25rpx"], ["bottom", "50rpx"]]))], ["showDish", padStyleMapOf(utsMapOf([["bottom", "15rpx"], ["width", "500rpx"], ["right", "80rpx"], ["left", "80rpx"], ["backgroundColor", "#fd717f"]]))], ["plus-btn-left", padStyleMapOf(utsMapOf([["width", "80rpx"], ["height", "80rpx"], ["left", "25rpx"], ["bottom", "50rpx"]]))], ["panel", padStyleMapOf(utsMapOf([["width", "100%"], ["height", "100rpx"], ["backgroundColor", "#fb3b88"]]))], ["animate-base", padStyleMapOf(utsMapOf([["transform", "scale(0.4)"], ["transitionProperty", "transform"], ["transitionDuration", "0.3s"]]))], ["animate-amplify", padStyleMapOf(utsMapOf([["transform", "scale(0.8)"], ["transitionProperty", "transform"], ["transitionDuration", "0.3s"]]))], ["animate-fade-out", padStyleMapOf(utsMapOf([["transform", "scale(0.8)"], ["opacity", 0.3]]))], ["@TRANSITION", utsMapOf([["animate-base", utsMapOf([["property", "transform"], ["duration", "0.3s"]])], ["animate-amplify", utsMapOf([["property", "transform"], ["duration", "0.3s"]])]])]])]
